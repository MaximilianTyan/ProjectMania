plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17
archivesBaseName = project.archives_base_name


// vvv Of interest vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    // Mod dependencies
    maven { url = "https://api.modrinth.com/maven"}  // Modrinth mods sources
    maven { url = 'https://maven.parchmentmc.org' } // Parchment mappings (replacing Yarn)

    // Create dependencies
    maven { url = "https://cursemaven.com"} // Forge Config API Port
    maven { url = "https://mvn.devos.one/snapshots/" } // Create, Porting Lib, Forge Tags, Milk Lib, Registrate
    maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://maven.tterrag.com/" } // Flywheel

    maven { url = 'https://nexus.resourcefulbees.com/repository/maven-public/'} // Terrarium Athena
}

dependencies {
    // Base game
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    // Mappings provider
    mappings loom.layered() {
//        it.mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
        it.parchment("org.parchmentmc.data:parchment-1.20.1:${project.parchment_version}@zip")
        it.officialMojangMappings() { nameSyntheticMembers = false }
    }

    // Mixin Extras
//    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${mixinextras_version}")))

// Fabric mod loader and API
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}+1.20.1"

    // Mod Dependencies
    modImplementation "maven.modrinth:open-parties-and-claims:fabric-1.20.1-${open_parties_and_claims_version}"
    modImplementation "maven.modrinth:forge-config-api-port:v${forge_config_api_port_version}-1.20.1-Fabric"
    modImplementation "maven.modrinth:midnightlib:${project.midnightlib_version}-fabric"

    // Mods ONLY remixed
    modCompileOnly "com.simibubi.create:create-fabric-${project.minecraft_version}:${create_version}+mc1.20.1"
    modCompileOnly "maven.modrinth:the-bumblezone-fabric:${project.bumblezone_version}+1.20.1-fabric"
}

// ^^^ Of interest ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loom {
    splitEnvironmentSourceSets()

    accessWidenerPath = file("src/main/resources/zondayland.accesswidener")

    mods {
        "zondayland" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

}

fabricApi {
    configureDataGeneration()
}

processResources {
    exclude("**/*.bbmodel", "**/*.lnk", "**/*.xcf")

    Map<String, String> properties = Map.of(
        "mod_version", project.mod_version,
        "fabric_loader_version", project.fabric_loader_version,
        "fabric_api_version", project.fabric_api_version,
        "minecraft_version", project.minecraft_version,
        "java_version", sourceCompatibility,
        "forge_config_api_port_version", project.forge_config_api_port_version,
        "open_parties_and_claims_version", project.open_parties_and_claims_version,
        "midnightlib_version", project.midnightlib_version
    ) as Map<String, String>

    inputs.properties(properties)

    filesMatching("fabric.mod.json") {
        expand properties
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = Integer.parseInt(sourceCompatibility)
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}